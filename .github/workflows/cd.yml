name: CD ECS Fargate via CloudFormation (3 Roles)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: medical-chatbot-autodeploy
  ECR_REPO: medical-chatbot-autodeploy
  CFN_TEMPLATE: cloudformation/ecs-fargate-public.yml
  APP_PORT: "8080"
  CPU: "512"
  MEMORY: "1024"
  DESIRED_COUNT: "1"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC) - BUILD ROLE
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_BUILD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push
        id: build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$REGISTRY/$ECR_REPO:$IMAGE_TAG" .
          docker push "$REGISTRY/$ECR_REPO:$IMAGE_TAG"
          echo "image_uri=$REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy_staging:
    runs-on: ubuntu-latest
    needs: build_and_push
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC) - STAGING ROLE
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Seed Secrets (staging)
        run: |
          aws secretsmanager create-secret --name "${PROJECT_NAME}/staging/OPENAI_API_KEY" --secret-string "${{ secrets.OPENAI_API_KEY }}" >/dev/null 2>&1 || \
          aws secretsmanager put-secret-value --secret-id "${PROJECT_NAME}/staging/OPENAI_API_KEY" --secret-string "${{ secrets.OPENAI_API_KEY }}"
          aws secretsmanager create-secret --name "${PROJECT_NAME}/staging/PINECONE_API_KEY" --secret-string "${{ secrets.PINECONE_API_KEY }}" >/dev/null 2>&1 || \
          aws secretsmanager put-secret-value --secret-id "${PROJECT_NAME}/staging/PINECONE_API_KEY" --secret-string "${{ secrets.PINECONE_API_KEY }}"

      - name: Resolve secret ARNs (staging)
        id: sm_arns
        run: |
          OPENAI_ARN=$(aws secretsmanager describe-secret --secret-id "${PROJECT_NAME}/staging/OPENAI_API_KEY" --query 'ARN' --output text)
          PINECONE_ARN=$(aws secretsmanager describe-secret --secret-id "${PROJECT_NAME}/staging/PINECONE_API_KEY" --query 'ARN' --output text)
          echo "openai=$OPENAI_ARN" >> $GITHUB_OUTPUT
          echo "pinecone=$PINECONE_ARN" >> $GITHUB_OUTPUT
          echo "OPENAI ARN: $OPENAI_ARN"
          echo "PINECONE ARN: $PINECONE_ARN"

      - name: Validate template with CloudFormation
        run: aws cloudformation validate-template --template-body "file://${{ env.CFN_TEMPLATE }}"

      - name: Deploy CFN (staging)
        run: |
          aws cloudformation deploy \
            --stack-name "${PROJECT_NAME}-staging" \
            --template-file "${{ env.CFN_TEMPLATE }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ProjectName="${PROJECT_NAME}" Env="staging" \
              ImageUri="${{ needs.build_and_push.outputs.image_uri }}" \
              AppPort="${APP_PORT}" ContainerCpu="${CPU}" ContainerMemory="${MEMORY}" DesiredCount="${DESIRED_COUNT}" \
              OpenAISecretArn="${{ steps.sm_arns.outputs.openai }}" \
              PineconeSecretArn="${{ steps.sm_arns.outputs.pinecone }}"

      - name: Output ALB DNS (staging)
        id: out
        run: |
          DNS=$(aws cloudformation describe-stacks --stack-name "${PROJECT_NAME}-staging" \
            --query "Stacks[0].Outputs[?OutputKey=='AlbDNS'].OutputValue" --output text)
          echo "dns=$DNS" >> $GITHUB_OUTPUT
          echo "Staging ALB: http://$DNS"

      - name: Wait for /health (staging)
        run: |
          URL="http://${{ steps.out.outputs.dns }}/health"
          echo "Waiting for $URL ..."
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i -> $code"
            if [ "$code" = "200" ]; then exit 0; fi
            sleep 10
          done
          echo "Health check failed"; exit 1

  deploy_production:
    runs-on: ubuntu-latest
    needs: [build_and_push, deploy_staging]
    environment: production   # add approval in repo Settings â†’ Environments
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC) - PRODUCTION ROLE
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_PRODUCTION }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Seed Secrets (production)
        run: |
          aws secretsmanager create-secret --name "${PROJECT_NAME}/production/OPENAI_API_KEY" --secret-string "${{ secrets.OPENAI_API_KEY }}" >/dev/null 2>&1 || \
          aws secretsmanager put-secret-value --secret-id "${PROJECT_NAME}/production/OPENAI_API_KEY" --secret-string "${{ secrets.OPENAI_API_KEY }}"
          aws secretsmanager create-secret --name "${PROJECT_NAME}/production/PINECONE_API_KEY" --secret-string "${{ secrets.PINECONE_API_KEY }}" >/dev/null 2>&1 || \
          aws secretsmanager put-secret-value --secret-id "${PROJECT_NAME}/production/PINECONE_API_KEY" --secret-string "${{ secrets.PINECONE_API_KEY }}"

      - name: Resolve secret ARNs (production)
        id: sm_arns_prod
        run: |
          OPENAI_ARN=$(aws secretsmanager describe-secret --secret-id "${PROJECT_NAME}/production/OPENAI_API_KEY" --query 'ARN' --output text)
          PINECONE_ARN=$(aws secretsmanager describe-secret --secret-id "${PROJECT_NAME}/production/PINECONE_API_KEY" --query 'ARN' --output text)
          echo "openai=$OPENAI_ARN" >> $GITHUB_OUTPUT
          echo "pinecone=$PINECONE_ARN" >> $GITHUB_OUTPUT
          echo "OPENAI ARN: $OPENAI_ARN"
          echo "PINECONE ARN: $PINECONE_ARN"

      - name: Deploy CFN (production)
        run: |
          aws cloudformation deploy \
            --stack-name "${PROJECT_NAME}-production" \
            --template-file "${{ env.CFN_TEMPLATE }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ProjectName="${PROJECT_NAME}" Env="production" \
              ImageUri="${{ needs.build_and_push.outputs.image_uri }}" \
              AppPort="${APP_PORT}" ContainerCpu="${CPU}" ContainerMemory="${MEMORY}" DesiredCount="${DESIRED_COUNT}" \
              OpenAISecretArn="${{ steps.sm_arns_prod.outputs.openai }}" \
              PineconeSecretArn="${{ steps.sm_arns_prod.outputs.pinecone }}"

      - name: Output ALB DNS (production)
        run: |
          DNS=$(aws cloudformation describe-stacks --stack-name "${PROJECT_NAME}-production" \
            --query "Stacks[0].Outputs[?OutputKey=='AlbDNS'].OutputValue" --output text)
          echo "Production ALB: http://$DNS"
